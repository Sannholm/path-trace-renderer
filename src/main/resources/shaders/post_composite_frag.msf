#include math

uniform sampler2D tex;
uniform float exposure;

in vec2 uv;

out vec4 out_color;

vec3 reinhardTonemap(const vec3 x)
{
	return x / (x + 1);
}

vec3 uncharted2Tonemap(const vec3 x)
{
	const float A = 0.15;
	const float B = 0.50;
	const float C = 0.10;
	const float D = 0.20;
	const float E = 0.02;
	const float F = 0.30;

	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 ACESFilmTonemap(vec3 x)
{
	x *= 0.6;
	const float a = 2.51;
	const float b = 0.03;
	const float c = 2.43;
	const float d = 0.59;
	const float e = 0.14;
	return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0, 1);
}

void main()
{
	vec3 hdr = texture(tex, uv).rgb;
	vec3 ldr = ACESFilmTonemap(hdr * exposure);
	vec3 srgb = linearToSRGB(ldr);
	
	out_color = vec4(srgb, 1);
}
