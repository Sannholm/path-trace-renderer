// Constants

const float INFINITY = 1.0 / 0.0;
const float EPSILON = 1e-4;
const float PI = 3.1415926535897932384626433832795;

// Util

float sq(const float x)
{
	return x * x;
}

float sq(const vec3 x)
{
	return dot(x, x);
}

// Vectors

void buildLocalFrame(out vec3 u, out vec3 v, const vec3 w)
{
	u = normalize(abs(w.x) > abs(w.y) ? vec3(-w.z, 0, w.x) : vec3(0, w.z, -w.y));
	v = normalize(cross(w, u));
}

mat3 vectorLocalFrameMat(const vec3 w)
{
	vec3 u, v;
	buildLocalFrame(u, v, w);
	return transpose(mat3(u, v, w));
}

mat3 rotateToFrameMat(const vec3 u, const vec3 v, const vec3 w)
{
	return transpose(mat3(u, v, w));
}

// Color

vec3 sRGBToLinear(const vec3 sRGBCol)
{
	vec3 linearRGBLo = sRGBCol / 12.92;
	vec3 linearRGBHi = pow((sRGBCol + 0.055) / 1.055, vec3(2.4));
	vec3 linearRGB = mix(linearRGBHi, linearRGBLo, lessThanEqual(sRGBCol, vec3(0.04045)));
	return linearRGB;
}

vec3 linearToSRGB(const vec3 linearCol)
{
	vec3 sRGBLo = linearCol * 12.92;
	vec3 sRGBHi = pow(abs(linearCol), vec3(1.0 / 2.4)) * 1.055 - 0.055;
	vec3 sRGB = mix(sRGBHi, sRGBLo, lessThanEqual(linearCol, vec3(0.0031308)));
	return sRGB;
}

// Texture mapping

vec3 equirectangularMap(const sampler2D sampler, const vec3 dir)
{
	vec2 longlat = vec2(atan(dir.z, dir.x), acos(dir.y));
	vec2 uv = longlat * vec2(1 / (2 * PI), 1 / PI);
 	return texture(sampler, uv).rgb;
}

// Sampling

vec3 sampleHemisphereCosineWeighted(const vec2 rand, const vec3 dir)
{
	float theta = 2 * PI * rand.y;
	vec2 disk = vec2(sin(theta), cos(theta)) * sqrt(1 - rand.x);
	vec3 v = vec3(disk.xy, sqrt(rand.x));
	return v * vectorLocalFrameMat(dir);
}

vec3 sampleSphere(const vec2 rand)
{
	float theta = 2 * PI * rand.x;
	float u = rand.y * 2 - 1;
	return vec3(vec2(cos(theta), sin(theta)) * sqrt(1 - u * u), u);
}

vec3 sampleDisk(const vec2 rand, const vec3 normal)
{
	float theta = acos(sqrt(1 - rand.x));
	float phi = 2 * PI * rand.y;
	vec3 v = vec3(vec2(cos(phi), sin(phi)) * sin(theta), 0);
	return v * vectorLocalFrameMat(normal);
}

// Multiple Importance Sampling

float balanceHeuristic(const int nf, const float fPdf, const int ng, const float gPdf)
{
	return (nf * fPdf) / (nf * fPdf + ng * gPdf);
}

float powerHeuristic(const int nf, const float fPdf, const int ng, const float gPdf)
{
	float f = nf * fPdf, g = ng * gPdf;
	return (f * f) / (f * f + g * g);
}

// Disney BRDF

struct DisneyParams
{
	vec3 baseColor;
	float metallic;
	float subsurface;
	float specular;
	float roughness;
	float specularTint;
	float anisotropic;
	float sheen;
	float sheenTint;
	float clearcoat;
	float clearcoatGloss;
};

const DisneyParams DISNEY_NULL = DisneyParams(vec3(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

vec3 sampleGTR1(const vec3 normal, const vec3 X, const vec3 Y, const float rx, const float ry, const float roughness)
{
	float phiH = 2 * PI * rx;
	float a2 = sq(roughness);
	float cosThetaH = a2 == 1
		? sqrt(1 - ry)
		: sqrt((1 - pow(a2, 1 - ry)) / (1 - a2));

	vec3 omega = vec3(vec2(cos(phiH), sin(phiH)) * sqrt(1 - sq(cosThetaH)), cosThetaH);
	return normalize(omega * rotateToFrameMat(X, Y, normal));
}

vec2 sampleGTR2AnisoSlope(const float theta, const float rx, float ry)
{
	vec2 slope;

	if (theta < EPSILON)
	{
		float r = sqrt(rx / (1 - rx));
		float phi = 2 * PI * ry;
		return vec2(cos(phi), sin(phi)) * r;
	}

	float B = tan(theta);
	float B2 = sq(B);
	float G1 = 2 / (1 + sqrt(1 + B2));

	// sample slope_x
	float A = 2 * rx / G1 - 1;
	float A2 = sq(A);
	if (abs(A2 - 1) < EPSILON)
	{
		float r = sqrt(rx / (1 - rx));
		float phi = 2 * PI * ry;
		return vec2(cos(phi), sin(phi)) * r;
	}

	float tmp = 1 / (A2 - 1);
	float D = sqrt(max(0, B2 * sq(tmp) - (A2 - B2) * tmp));
	float slopeX1 = B * tmp - D;
	float slopeX2 = B * tmp + D;
	slope.x = (A < 0 || slopeX2 > 1 / B) ? slopeX1 : slopeX2;

	// sample slope_y
	float sign = 1;
	if (ry > 0.5)
	{
		ry = 2 * (ry - 0.5);
	}
	else
	{
		sign = -1;
		ry = 2 * (0.5 - ry);
	}

	float z = (ry *(ry *(ry * 0.27385 - 0.73369) + 0.46341))
			/ (ry *(ry *(ry * 0.093073 + 0.309420) - 1) + 0.597999);
	slope.y = sign * z * sqrt(1 + sq(slope.x));
	return slope;
}

vec3 sampleGTR2AnisoDirectionFromSlope(const vec3 normal, const vec3 Lo, const vec3 X, const vec3 Y, const float ax, const float ay, const float rx, const float ry)
{
	vec3 V = Lo;

	// Transform to local frame
	float cosThetaV = clamp(dot(normal, V), -1, 1);
	float phiV = atan(dot(Y, V), dot(X, V));
	V = vec3(vec2(cos(phiV), sin(phiV)) * sqrt(1 - sq(cosThetaV)), cosThetaV);

	// Stretch view direction
	V.xy *= vec2(ax, ay);
	V = normalize(V);

	float theta = 0;
	float phi = 0;

	if (V.z < (1 - EPSILON))
	{
		theta = acos(V.z);
		phi = atan(V.y, V.x);
	}

	vec2 slope = sampleGTR2AnisoSlope(theta, rx, ry);

	// Rotate & unstretch
	float cosPhi = cos(phi);
	float sinPhi = sin(phi);
	vec3 omega;
	omega.x = -(cosPhi * slope.x - sinPhi * slope.y) * ax;
	omega.y = -(sinPhi * slope.x + cosPhi * slope.y) * ay;
	omega.z = 1;

	return normalize(omega * rotateToFrameMat(X, Y, normal));
}

vec3 DisneyBRDFSampleSpecular(const vec3 normal, const vec3 Lo, const vec3 X, const vec3 Y, const float rx, const float ry, const DisneyParams p)
{
	// Select lobe by the relative weights.
	// Sample the microfacet normal first, then compute the reflect direction.
	vec3 M;

	float gtr2Weight = 1 / (p.clearcoat + 1);
	if (rx < gtr2Weight)
	{
		float aspect = sqrt(1-p.anisotropic*.9);
		float ax = max(.001, sq(p.roughness)/aspect);
		float ay = max(.001, sq(p.roughness)*aspect);
		M = sampleGTR2AnisoDirectionFromSlope(normal, Lo, X, Y, ax, ay, rx / gtr2Weight, ry);
	}
	else
	{
		M = sampleGTR1(normal, X, Y, (rx - gtr2Weight) / (1 - gtr2Weight), ry, p.roughness);
	}

	if (dot(normal, M) < 0)
		return vec3(0);

	return reflect(-Lo, M);
}

vec3 DisneyBRDFSample(const vec3 normal, const vec3 Lo, const vec3 X, const vec3 Y, const vec3 rand, const DisneyParams p)
{
	float diffuseWeight = (1 - p.metallic) / 2;
	if (rand.x < diffuseWeight)
	{
		return sampleHemisphereCosineWeighted(rand.yz, normal);
	}
	else
	{
		return DisneyBRDFSampleSpecular(normal, Lo, X, Y, rand.y, rand.z, p);
	}
}

float SchlickFresnel(const float u)
{
	float m = clamp(1 - u, 0, 1);
	float m2 = m * m;
	return m2 * m2 * m; // pow(m,5)
}

float GTR1(const float NdotH, const float a)
{
	if (a >= 1) return 1 / PI;
	float a2 = a * a;
	float t = 1 + (a2 - 1) * NdotH * NdotH;
	return (a2 - 1) / (PI * log(a2) * t);
}

float GTR2_aniso(const float NdotH, const float HdotX, const float HdotY, const float ax, const float ay)
{
	return 1 / (PI * ax * ay * sq(sq(HdotX / ax) + sq(HdotY / ay) + NdotH * NdotH));
}

float smithG_GGX(const float Ndotv, const float alphaG)
{
	float a = alphaG * alphaG;
	float b = Ndotv * Ndotv;
	return 1 / (Ndotv + sqrt(a + b - a * b));
}

vec3 DisneyBRDF(const vec3 L, const vec3 N, const vec3 V, const vec3 X, const vec3 Y, const DisneyParams p)
{
	float NdotL = dot(N,L);
	float NdotV = dot(N,V);
	if (NdotL < 0 || NdotV < 0) return vec3(0);

	vec3 H = normalize(L+V);
	float NdotH = dot(N,H);
	float LdotH = dot(L,H);

	vec3 Cdlin = sRGBToLinear(p.baseColor);
	float Cdlum = .3*Cdlin[0] + .6*Cdlin[1]  + .1*Cdlin[2]; // luminance approx.

	vec3 Ctint = Cdlum > 0 ? Cdlin/Cdlum : vec3(1); // normalize lum. to isolate hue+sat
	vec3 Cspec0 = mix(p.specular*.08*mix(vec3(1), Ctint, p.specularTint), Cdlin, p.metallic);
	vec3 Csheen = mix(vec3(1), Ctint, p.sheenTint);

	// Diffuse fresnel - go from 1 at normal incidence to .5 at grazing
	// and mix in diffuse retro-reflection based on roughness
	float FL = SchlickFresnel(NdotL), FV = SchlickFresnel(NdotV);
	float Fd90 = 0.5 + 2 * LdotH*LdotH * p.roughness;
	float Fd = mix(1, Fd90, FL) * mix(1, Fd90, FV);

	// Based on Hanrahan-Krueger brdf approximation of isotropic bssrdf
	// 1.25 scale is used to (roughly) preserve albedo
	// Fss90 used to "flatten" retroreflection based on roughness
	float Fss90 = LdotH*LdotH*p.roughness;
	float Fss = mix(1, Fss90, FL) * mix(1, Fss90, FV);
	float ss = 1.25 * (Fss * (1 / (NdotL + NdotV) - .5) + .5);

	// specular
	float aspect = sqrt(1-p.anisotropic*.9);
	float ax = max(.001, sq(p.roughness)/aspect);
	float ay = max(.001, sq(p.roughness)*aspect);
	float Ds = GTR2_aniso(NdotH, dot(H, X), dot(H, Y), ax, ay);
	float FH = SchlickFresnel(LdotH);
	vec3 Fs = mix(Cspec0, vec3(1), FH);
	float roughg = sq(p.roughness*.5+.5);
	float Gs = smithG_GGX(NdotL, roughg) * smithG_GGX(NdotV, roughg);

	// sheen
	vec3 Fsheen = FH * p.sheen * Csheen;

	// clearcoat (ior = 1.5 -> F0 = 0.04)
	float Dr = GTR1(NdotH, mix(.1,.001,p.clearcoatGloss));
	float Fr = mix(.04, 1.0, FH);
	float Gr = smithG_GGX(NdotL, .25) * smithG_GGX(NdotV, .25);

	return ((1/PI) * mix(Fd, ss, p.subsurface)*Cdlin + Fsheen)
		* (1-p.metallic)
		+ Gs*Fs*Ds + .25*p.clearcoat*Gr*Fr*Dr;
}

float D_GTR1(const vec3 m, const float MdotN2, const float alpha)
{
	float a2 = sq(alpha);
	float denominator = log(a2) * (1 + (a2 - 1) * MdotN2);
	return (a2 - 1) * 1/PI / denominator;
}

float D_GTR2Aniso(const vec3 m, const float MdotN2, const vec3 X, const vec3 Y, const float ax, const float ay)
{
	float HdotU = dot(m, X);
	float HdotV = dot(m, Y);

	float denominator = ax * ay * sq(sq(HdotU / ax) + sq(HdotV / ay) + MdotN2);
	return 1/PI / denominator;
}

float DisneyBRDFPDFSpecular(const vec3 Li, const vec3 normal, const vec3 Lo, const vec3 X, const vec3 Y, const DisneyParams p)
{
	vec3 m = normalize(Li + Lo);
	float IdotM = abs(dot(Li, m));
	float MdotN = dot(m, normal);

	if (MdotN < 0)
		return 0;

	float MdotN2 = sq(MdotN);

	float aspect = sqrt(1-p.anisotropic*.9);
	float ax = max(.001, sq(p.roughness)/aspect);
	float ay = max(.001, sq(p.roughness)*aspect);

	float clearcoatWeight = p.clearcoat / (p.clearcoat + 1);

	float VdotN = max(1e-4, dot(Lo, normal));
	float roughg = sq(p.roughness*.5+.5);
	float Dw = smithG_GGX(IdotM, roughg) * D_GTR2Aniso(m, MdotN2, X, Y, ax, ay) * 2 * IdotM / VdotN;
	float D = mix(Dw, D_GTR1(m, MdotN2, mix(0.1f, 0.001f, p.clearcoatGloss)) * abs(MdotN) / IdotM, clearcoatWeight);
	return D * 0.25f;
}

float DisneyBRDFPDF(const vec3 Li, const vec3 normal, const vec3 Lo, const vec3 X, const vec3 Y, const DisneyParams p)
{
	float diffuseWeight = (1 - p.metallic) / 2;
	return mix(DisneyBRDFPDFSpecular(Li, normal, Lo, X, Y, p), dot(normal, Li) / PI, diffuseWeight);
}
