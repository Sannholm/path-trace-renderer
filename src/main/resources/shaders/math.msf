// Constants

const float INFINITY = 1.0 / 0.0;
const float PI = 3.1415926535897932384626433832795;

// Util

float sq(const float x)
{
	return x*x;
}

float sq(const vec3 x)
{
	return dot(x, x);
}

// Color

vec3 sRGBToLinear(const vec3 sRGBCol)
{
	vec3 linearRGBLo = sRGBCol / 12.92;
	vec3 linearRGBHi = pow((sRGBCol + 0.055) / 1.055, vec3(2.4));
	vec3 linearRGB = mix(linearRGBHi, linearRGBLo, lessThanEqual(sRGBCol, vec3(0.04045)));
	return linearRGB;
}

vec3 linearToSRGB(const vec3 linearCol)
{
	vec3 sRGBLo = linearCol * 12.92;
	vec3 sRGBHi = pow(abs(linearCol), vec3(1.0/2.4)) * 1.055 - 0.055;
	vec3 sRGB = mix(sRGBHi, sRGBLo, lessThanEqual(linearCol, vec3(0.0031308)));
	return sRGB;
}

// Multiple Importance Sampling

float balanceHeuristic(const int nf, const float fPdf, const int ng, const float gPdf)
{
    return (nf * fPdf) / (nf * fPdf + ng * gPdf);
}

float powerHeuristic(const int nf, const float fPdf, const int ng, const float gPdf)
{
	float f = nf * fPdf, g = ng * gPdf;
    return (f * f) / (f * f + g * g);
}

// Shading

float SchlickFresnel(const float u)
{
    float m = clamp(1-u, 0, 1);
    float m2 = m*m;
    return m2*m2*m; // pow(m,5)
}

float GTR1(const float NdotH, const float a)
{
    if (a >= 1) return 1/PI;
    float a2 = a*a;
    float t = 1 + (a2-1)*NdotH*NdotH;
    return (a2-1) / (PI*log(a2)*t);
}

float GTR2(const float NdotH, const float a)
{
    float a2 = a*a;
    float t = 1 + (a2-1)*NdotH*NdotH;
    return a2 / (PI * t*t);
}

float GTR2_aniso(const float NdotH, const float HdotX, const float HdotY, const float ax, const float ay)
{
    return 1 / ( PI * ax*ay * sq( sq(HdotX/ax) + sq(HdotY/ay) + NdotH*NdotH ));
}

float smithG_GGX(const float Ndotv, const float alphaG)
{
    float a = alphaG*alphaG;
    float b = Ndotv*Ndotv;
    return 1/(Ndotv + sqrt(a + b - a*b));
}

struct DisneyParams
{
	vec3 baseColor;
	float metallic;
	float subsurface;
	float specular;
	float roughness;
	float specularTint;
	float anisotropic;
	float sheen;
	float sheenTint;
	float clearcoat;
	float clearcoatGloss;
};

vec3 DisneyBRDF(const vec3 L, const vec3 V, const vec3 N, const vec3 X, const vec3 Y, const DisneyParams p)
{
    float NdotL = dot(N,L);
    float NdotV = dot(N,V);
    if (NdotL < 0 || NdotV < 0) return vec3(0);

    vec3 H = normalize(L+V);
    float NdotH = dot(N,H);
    float LdotH = dot(L,H);

    vec3 Cdlin = sRGBToLinear(p.baseColor);
    float Cdlum = .3*Cdlin[0] + .6*Cdlin[1]  + .1*Cdlin[2]; // luminance approx.

    vec3 Ctint = Cdlum > 0 ? Cdlin/Cdlum : vec3(1); // normalize lum. to isolate hue+sat
    vec3 Cspec0 = mix(p.specular*.08*mix(vec3(1), Ctint, p.specularTint), Cdlin, p.metallic);
    vec3 Csheen = mix(vec3(1), Ctint, p.sheenTint);

    // Diffuse fresnel - go from 1 at normal incidence to .5 at grazing
    // and mix in diffuse retro-reflection based on roughness
    float FL = SchlickFresnel(NdotL), FV = SchlickFresnel(NdotV);
    float Fd90 = 0.5 + 2 * LdotH*LdotH * p.roughness;
    float Fd = mix(1, Fd90, FL) * mix(1, Fd90, FV);

    // Based on Hanrahan-Krueger brdf approximation of isotropic bssrdf
    // 1.25 scale is used to (roughly) preserve albedo
    // Fss90 used to "flatten" retroreflection based on roughness
    float Fss90 = LdotH*LdotH*p.roughness;
    float Fss = mix(1, Fss90, FL) * mix(1, Fss90, FV);
    float ss = 1.25 * (Fss * (1 / (NdotL + NdotV) - .5) + .5);

    // specular
    float aspect = sqrt(1-p.anisotropic*.9);
    float ax = max(.001, sq(p.roughness)/aspect);
    float ay = max(.001, sq(p.roughness)*aspect);
    float Ds = GTR2_aniso(NdotH, dot(H, X), dot(H, Y), ax, ay);
    float FH = SchlickFresnel(LdotH);
    vec3 Fs = mix(Cspec0, vec3(1), FH);
    float roughg = sq(p.roughness*.5+.5);
    float Gs = smithG_GGX(NdotL, roughg) * smithG_GGX(NdotV, roughg);

    // sheen
    vec3 Fsheen = FH * p.sheen * Csheen;

    // clearcoat (ior = 1.5 -> F0 = 0.04)
    float Dr = GTR1(NdotH, mix(.1,.001,p.clearcoatGloss));
    float Fr = mix(.04, 1.0, FH);
    float Gr = smithG_GGX(NdotL, .25) * smithG_GGX(NdotV, .25);

    return ((1/PI) * mix(Fd, ss, p.subsurface)*Cdlin + Fsheen)
        * (1-p.metallic)
        + Gs*Fs*Ds + .25*p.clearcoat*Gr*Fr*Dr;
}
